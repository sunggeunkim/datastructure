Finding least common ancestor.
To find the least common ancestor in BST, we can start from the root and see if the root's data is in between the node1 and node2's data.
This is because in BST (let's say node1 < node2), if node1 is smaller than the root, that means node1 is part of left subtree of the root and if node2 is larger than the root, that means node2 is right subtree of the root.
If the above condition does not met, we can recusrively do the same check for the left child and right child of the root.
If we meet a None node which means that we reached the end of the tree, it means that there is no least common ancestor.

The worst case runtime for this algorithm is O(n^2), but it depends on whether the tree is balanced or not, if the tree is well balanced, the run-time should be O(n*log(n)). The reason for the runtime for the worst case is that when we go down from the root to the leaf nodes,in unbalanced tree we need to travel all the nodes linearly from top to bottom (~O(n)). At each level, we need to check all the elements (in worst case) in a row in the adjacency matrix to find the right (or left) child. (~O(n)). Therefore, the worst case runtime is O(n^2).

The space complexity is that as we call the function recursively, since there can be n call in the worst case, it is O(n).

However, if the same function is implemented iteratively, the space complexity can be O(1). The iterative implementation is provided in question4_iterative.py

Test cases that I tried:
print question4([[0, 1, 0, 0, 0],
           [0, 0, 0, 0, 0],
           [0, 0, 0, 0, 0],
           [1, 0, 0, 0, 1],
           [0, 0, 0, 0, 0]],
          3,
          1,
          4)
#result:3
print question4([[0, 1, 0, 0, 0],
           [0, 0, 1, 0, 0],
           [0, 0, 0, 0, 0],
           [1, 0, 0, 0, 1],
           [0, 0, 0, 0, 0]],
          3,
          1,
          2)
#result:1


