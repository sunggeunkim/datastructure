To find the node that is in m-th location from the end in a singly linked list, we can use two pointers. One pointer will traverse the tree m node before the other pointer so that when the pre-running pointer reaches the end, the other will points to the m-th node from the end.

The time complexity of the algorith is O(n-m) because the pointer has to travel n-m nodes.
The space complexity of this algorithm is O(1) since we only need two pointers that takes constant space.

Test case:
head = Node(1)
head.next = Node(2)
head.next.next = Node(3)
head.next.next.next = Node(4)
head.next.next.next.next = Node(5)
print question5(head, 3)
#result: 3


